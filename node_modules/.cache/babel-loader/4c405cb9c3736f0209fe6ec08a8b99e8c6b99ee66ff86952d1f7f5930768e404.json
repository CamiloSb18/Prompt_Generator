{"ast":null,"code":"var _jsxFileName = \"/Users/kushki/Downloads/PromptGenerator/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Asegúrate de tener axios instalado\nimport FormSection from './components/FormSection';\nimport HistoryForm from './components/HistoryForm';\nimport ResultDisplay from './components/ResultDisplay'; // Importa ResultDisplay\nimport SavedStories from './components/SavedStories';\nimport Header from './components/Header';\nimport { getStories, saveStory } from './utils/storage'; // Asegúrate de que estas funciones existan y funcionen\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentPrompt, setCurrentPrompt] = useState(''); // Este será el prompt generado que enviaremos a la IA\n  const [aiResponse, setAiResponse] = useState('');\n  const [isLoadingAI, setIsLoadingAI] = useState(false); // Cambiado a isLoadingAI para evitar conflictos\n  const [aiError, setAiError] = useState(null);\n  const [savedStories, setSavedStories] = useState([]);\n  const [selectedStory, setSelectedStory] = useState(null); // Para cargar una historia desde SavedStories\n  const [showHistory, setShowHistory] = useState(false); // Estado para controlar la visibilidad del historial\n\n  // Función para manejar la generación del prompt desde FormSection\n  const handleGeneratePrompt = newPrompt => {\n    setCurrentPrompt(newPrompt);\n  };\n\n  // Función para limpiar el formulario, y también el prompt generado y respuesta de IA\n  const handleClearForm = () => {\n    setCurrentPrompt('');\n    setAiResponse('');\n    setAiError(null);\n    setSelectedStory(null);\n    // Asegúrate de que FormSection tenga una forma de limpiarse también\n  };\n\n  // Cargar historias guardadas al inicio\n  useEffect(() => {\n    setSavedStories(getStories());\n  }, []);\n  const handleSaveStory = storyContent => {\n    saveStory(storyContent);\n    setSavedStories(getStories()); // Actualizar la lista de historias guardadas\n    alert('Historia guardada exitosamente!');\n  };\n  const handleDeleteStory = id => {\n    const updatedStories = savedStories.filter(story => story.id !== id);\n    localStorage.setItem('stories', JSON.stringify(updatedStories));\n    setSavedStories(updatedStories);\n    if (selectedStory && selectedStory.id === id) {\n      setSelectedStory(null); // Si la historia eliminada estaba seleccionada, deseleccionarla\n    }\n  };\n  const handleLoadStory = story => {\n    setSelectedStory(story);\n    setCurrentPrompt(story.content); // Carga el contenido de la historia como prompt actual\n    setAiResponse(''); // Limpia la respuesta de la IA anterior\n    setAiError(null);\n  };\n\n  // Función para enviar el prompt a la IA (Google Gemini en este ejemplo)\n  const sendPromptToAI = async promptToSend => {\n    setIsLoadingAI(true);\n    setAiError(null);\n    setAiResponse('');\n\n    // **IMPORTANTE: Usa variables de entorno para tu API Key**\n    // Crea un archivo .env en la raíz de tu proyecto con:\n    // REACT_APP_GEMINI_API_KEY=tu_clave_gemini_aqui\n    const GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n    const GEMINI_API_ENDPOINT = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`;\n    // O si usas OpenAI:\n    // const OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n    // const OPENAI_API_ENDPOINT = 'https://api.openai.com/v1/completions';\n\n    if (!promptToSend) {\n      setAiError(\"No hay prompt para enviar a la IA.\");\n      setIsLoadingAI(false);\n      return;\n    }\n    try {\n      const response = await axios.post(GEMINI_API_ENDPOINT, {\n        contents: [{\n          parts: [{\n            text: promptToSend\n          }]\n        }]\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n          // Para Gemini, la clave va en la URL, no en el header 'Authorization'\n          // Si usas OpenAI, sería: 'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        }\n      });\n\n      // La estructura de la respuesta varía según la API de IA.\n      // Para Gemini, la respuesta suele estar en response.data.candidates[0].content.parts[0].text\n      if (response.data && response.data.candidates && response.data.candidates.length > 0) {\n        setAiResponse(response.data.candidates[0].content.parts[0].text);\n      } else {\n        setAiResponse(\"No se obtuvo una respuesta válida de la IA.\");\n      }\n    } catch (err) {\n      console.error(\"Error al enviar prompt a la IA:\", err);\n      if (err.response) {\n        // El servidor respondió con un estado fuera del rango 2xx\n        setAiError(`Error de la IA: ${err.response.status} - ${err.response.data.error.message || 'Error desconocido'}`);\n      } else if (err.request) {\n        // La petición fue hecha pero no hubo respuesta\n        setAiError(\"No se recibió respuesta de la IA. Verifique su conexión de red o el endpoint de la API.\");\n      } else {\n        // Algo más causó el error\n        setAiError(`Ocurrió un error inesperado: ${err.message}`);\n      }\n    } finally {\n      setIsLoadingAI(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-5xl mx-auto py-8 px-4\",\n      children: [/*#__PURE__*/_jsxDEV(FormSection, {\n        onGeneratePrompt: handleGeneratePrompt,\n        onClearForm: handleClearForm,\n        selectedStory: selectedStory // Pasa el selectedStory al FormSection\n        // Añadir prop para limpiar el FormSection cuando se carga una historia\n        ,\n        resetForm: () => setSelectedStory(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-8\",\n        children: [/*#__PURE__*/_jsxDEV(HistoryForm, {\n          setShowHistory: setShowHistory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), showHistory && /*#__PURE__*/_jsxDEV(SavedStories, {\n          stories: savedStories,\n          onDelete: handleDeleteStory,\n          onLoad: handleLoadStory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResultDisplay, {\n        generatedPrompt: currentPrompt,\n        onSaveStory: handleSaveStory\n        // handleCopyClick (ya lo tienes en ResultDisplay si usas Clipboard.writeText)\n        ,\n        onSendToAI: () => sendPromptToAI(currentPrompt) // Pasa la función\n        ,\n        isSendingToAI: isLoadingAI // Pasa el estado de carga\n        ,\n        aiResponse: aiResponse // Pasa la respuesta de la IA\n        ,\n        aiError: aiError // Pasa el error de la IA\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xTCeNf9RMvPWRFrOF13iIYgFsqQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","FormSection","HistoryForm","ResultDisplay","SavedStories","Header","getStories","saveStory","jsxDEV","_jsxDEV","App","_s","currentPrompt","setCurrentPrompt","aiResponse","setAiResponse","isLoadingAI","setIsLoadingAI","aiError","setAiError","savedStories","setSavedStories","selectedStory","setSelectedStory","showHistory","setShowHistory","handleGeneratePrompt","newPrompt","handleClearForm","handleSaveStory","storyContent","alert","handleDeleteStory","id","updatedStories","filter","story","localStorage","setItem","JSON","stringify","handleLoadStory","content","sendPromptToAI","promptToSend","GEMINI_API_KEY","process","env","REACT_APP_GEMINI_API_KEY","GEMINI_API_ENDPOINT","response","post","contents","parts","text","headers","data","candidates","length","err","console","error","status","message","request","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onGeneratePrompt","onClearForm","resetForm","stories","onDelete","onLoad","generatedPrompt","onSaveStory","onSendToAI","isSendingToAI","_c","$RefreshReg$"],"sources":["/Users/kushki/Downloads/PromptGenerator/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Asegúrate de tener axios instalado\nimport FormSection from './components/FormSection';\nimport HistoryForm from './components/HistoryForm';\nimport ResultDisplay from './components/ResultDisplay'; // Importa ResultDisplay\nimport SavedStories from './components/SavedStories';\nimport Header from './components/Header';\nimport { getStories, saveStory } from './utils/storage'; // Asegúrate de que estas funciones existan y funcionen\n\nfunction App() {\n  const [currentPrompt, setCurrentPrompt] = useState(''); // Este será el prompt generado que enviaremos a la IA\n  const [aiResponse, setAiResponse] = useState('');\n  const [isLoadingAI, setIsLoadingAI] = useState(false); // Cambiado a isLoadingAI para evitar conflictos\n  const [aiError, setAiError] = useState(null);\n\n  const [savedStories, setSavedStories] = useState([]);\n  const [selectedStory, setSelectedStory] = useState(null); // Para cargar una historia desde SavedStories\n  const [showHistory, setShowHistory] = useState(false); // Estado para controlar la visibilidad del historial\n\n  // Función para manejar la generación del prompt desde FormSection\n  const handleGeneratePrompt = (newPrompt) => {\n    setCurrentPrompt(newPrompt);\n  };\n\n  // Función para limpiar el formulario, y también el prompt generado y respuesta de IA\n  const handleClearForm = () => {\n    setCurrentPrompt('');\n    setAiResponse('');\n    setAiError(null);\n    setSelectedStory(null);\n    // Asegúrate de que FormSection tenga una forma de limpiarse también\n  };\n\n  // Cargar historias guardadas al inicio\n  useEffect(() => {\n    setSavedStories(getStories());\n  }, []);\n\n  const handleSaveStory = (storyContent) => {\n    saveStory(storyContent);\n    setSavedStories(getStories()); // Actualizar la lista de historias guardadas\n    alert('Historia guardada exitosamente!');\n  };\n\n  const handleDeleteStory = (id) => {\n    const updatedStories = savedStories.filter(story => story.id !== id);\n    localStorage.setItem('stories', JSON.stringify(updatedStories));\n    setSavedStories(updatedStories);\n    if (selectedStory && selectedStory.id === id) {\n      setSelectedStory(null); // Si la historia eliminada estaba seleccionada, deseleccionarla\n    }\n  };\n\n  const handleLoadStory = (story) => {\n    setSelectedStory(story);\n    setCurrentPrompt(story.content); // Carga el contenido de la historia como prompt actual\n    setAiResponse(''); // Limpia la respuesta de la IA anterior\n    setAiError(null);\n  };\n\n  // Función para enviar el prompt a la IA (Google Gemini en este ejemplo)\n  const sendPromptToAI = async (promptToSend) => {\n    setIsLoadingAI(true);\n    setAiError(null);\n    setAiResponse('');\n\n    // **IMPORTANTE: Usa variables de entorno para tu API Key**\n    // Crea un archivo .env en la raíz de tu proyecto con:\n    // REACT_APP_GEMINI_API_KEY=tu_clave_gemini_aqui\n    const GEMINI_API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n    const GEMINI_API_ENDPOINT = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`;\n    // O si usas OpenAI:\n    // const OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n    // const OPENAI_API_ENDPOINT = 'https://api.openai.com/v1/completions';\n\n    if (!promptToSend) {\n      setAiError(\"No hay prompt para enviar a la IA.\");\n      setIsLoadingAI(false);\n      return;\n    }\n\n    try {\n      const response = await axios.post(\n        GEMINI_API_ENDPOINT,\n        {\n          contents: [{\n            parts: [{\n              text: promptToSend\n            }]\n          }]\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            // Para Gemini, la clave va en la URL, no en el header 'Authorization'\n            // Si usas OpenAI, sería: 'Authorization': `Bearer ${OPENAI_API_KEY}`,\n          },\n        }\n      );\n\n      // La estructura de la respuesta varía según la API de IA.\n      // Para Gemini, la respuesta suele estar en response.data.candidates[0].content.parts[0].text\n      if (response.data && response.data.candidates && response.data.candidates.length > 0) {\n        setAiResponse(response.data.candidates[0].content.parts[0].text);\n      } else {\n        setAiResponse(\"No se obtuvo una respuesta válida de la IA.\");\n      }\n\n    } catch (err) {\n      console.error(\"Error al enviar prompt a la IA:\", err);\n      if (err.response) {\n        // El servidor respondió con un estado fuera del rango 2xx\n        setAiError(`Error de la IA: ${err.response.status} - ${err.response.data.error.message || 'Error desconocido'}`);\n      } else if (err.request) {\n        // La petición fue hecha pero no hubo respuesta\n        setAiError(\"No se recibió respuesta de la IA. Verifique su conexión de red o el endpoint de la API.\");\n      } else {\n        // Algo más causó el error\n        setAiError(`Ocurrió un error inesperado: ${err.message}`);\n      }\n    } finally {\n      setIsLoadingAI(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <div className=\"max-w-5xl mx-auto py-8 px-4\">\n        <FormSection\n          onGeneratePrompt={handleGeneratePrompt}\n          onClearForm={handleClearForm}\n          selectedStory={selectedStory} // Pasa el selectedStory al FormSection\n          // Añadir prop para limpiar el FormSection cuando se carga una historia\n          resetForm={() => setSelectedStory(null)}\n        />\n        <div className=\"mt-8\">\n          <HistoryForm setShowHistory={setShowHistory} />\n          {showHistory && (\n            <SavedStories\n              stories={savedStories}\n              onDelete={handleDeleteStory}\n              onLoad={handleLoadStory}\n            />\n          )}\n        </div>\n\n        {/* Pasar los props a ResultDisplay */}\n        <ResultDisplay\n          generatedPrompt={currentPrompt}\n          onSaveStory={handleSaveStory}\n          // handleCopyClick (ya lo tienes en ResultDisplay si usas Clipboard.writeText)\n          onSendToAI={() => sendPromptToAI(currentPrompt)} // Pasa la función\n          isSendingToAI={isLoadingAI} // Pasa el estado de carga\n          aiResponse={aiResponse} // Pasa la respuesta de la IA\n          aiError={aiError} // Pasa el error de la IA\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}